package cn.itcast.day10.demo06;

/*
1.对象的向上转型,其实就是多态写法
[格式:父类名称 对象名 = new 子类名称();]
含义:右侧创建一个子类对象,把它当做父类来看待使用

注意事项:
[向上转型一定是安全的]从小范围转向大范围

2.对象的向下转型,其实就是一个[还原]的动作
[格式:子类名称 对象名 = (子类名称)父类名称;]
含义:将父类对象,[还原]成为本来的子类对象
注意事项:
A.必须保证对象本来创建的时候,就是猫,才能向下转型成为猫
B.如果对象创建的时候本来不是猫,现在非要向下转型成为猫,就会报错
类似于:强制类型转换

向上转型一定是安全的,没有问题的,正确的.但是也有一个弊端
对象一旦向上转型为父类,那么就无法调用子类原本特有的内容

解决方案:用对象的向下转型[还原]

 */
public class Demo01Main {
    public static void main(String[] args) {
        // 对象的向上转型,就是:父类引用指向子类对象
        Animal animal = new Cat();// 本来创建的时候是一只猫
        animal.eat();// 猫吃鱼
//        animal.catchMouse();// 错误写法

        // 向下转型,进行"还原"动作
        Cat cat = (Cat)animal;
        cat.catchMouse();// 猫抓老鼠

        // 下满是错误的向下转型
        // 本来new的时候是一只猫,现在非要当做狗
        // 错误写法 编译不会报错 但是编译会异常
        // ClassCastException 类转换异常
//        Dog dog = (Dog) animal;
    }
}
